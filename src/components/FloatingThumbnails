import React, { useState, useEffect, useCallback } from 'react';

const projects = [
  {
    id: 1,
    title: "CurrencyKey",
    image: "src\images\CurrencyKeypic.png",
    url: "https://antcamper.github.io/CurrencyKey/index.html",
    description: "This is a group project I had a major role in developing. If you'd like to know more please visit the github page"
  },
  {
    id: 2,
    title: "Project 2",
    image: "/path-to-image2.jpg",
    url: "https://project2.com",
    description: "Project 2 description"
  },
  // Add your projects here
];

const FloatingThumbnails = () => {
  const [thumbnails, setThumbnails] = useState([]);
  const [hoveredId, setHoveredId] = useState(null);
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });

  const initializeThumbnails = useCallback(() => {
    return projects.map(() => ({
      x: Math.random() * windowSize.width,
      y: Math.random() * windowSize.height,
      speedX: (Math.random() - 0.5) * 1.5,
      speedY: (Math.random() - 0.5) * 1.5,
      rotation: Math.random() * 360
    }));
  }, [windowSize]);

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    setThumbnails(initializeThumbnails());
  }, [initializeThumbnails]);

  useEffect(() => {
    const animationFrame = requestAnimationFrame(function animate() {
      setThumbnails(prevThumbnails => 
        prevThumbnails.map(thumbnail => {
          let newX = thumbnail.x + thumbnail.speedX;
          let newY = thumbnail.y + thumbnail.speedY;
          let newRotation = thumbnail.rotation + 0.1;

          // Immediate wrap-around with no buffer
          if (newX < 0) {
            newX = windowSize.width;
          } else if (newX > windowSize.width) {
            newX = 0;
          }

          if (newY < 0) {
            newY = windowSize.height;
          } else if (newY > windowSize.height) {
            newY = 0;
          }

          return {
            ...thumbnail,
            x: newX,
            y: newY,
            rotation: newRotation % 360
          };
        })
      );
      
      requestAnimationFrame(animate);
    });

    return () => cancelAnimationFrame(animationFrame);
  }, [windowSize]);

  return (
    <div className="fixed inset-0 pointer-events-none overflow-hidden">
      {thumbnails.map((thumbnail, index) => (
        <a
          key={projects[index].id}
          href={projects[index].url}
          target="_blank"
          rel="noopener noreferrer"
          className="absolute w-24 h-24 rounded-lg overflow-hidden shadow-lg transition-all duration-300 pointer-events-auto"
          style={{
            transform: `translate(${thumbnail.x}px, ${thumbnail.y}px) rotate(${thumbnail.rotation}deg) scale(${hoveredId === projects[index].id ? 1.2 : 1})`,
            zIndex: hoveredId === projects[index].id ? 10 : 1
          }}
          onMouseEnter={() => setHoveredId(projects[index].id)}
          onMouseLeave={() => setHoveredId(null)}
        >
          <img
            src={projects[index].image}
            alt={projects[index].title}
            className="w-full h-full object-cover"
          />
          {hoveredId === projects[index].id && (
            <div className="absolute inset-0 bg-black bg-opacity-75 p-2 text-white text-sm flex flex-col justify-center items-center text-center">
              <h3 className="font-bold mb-1">{projects[index].title}</h3>
              <p className="text-xs">{projects[index].description}</p>
            </div>
          )}
        </a>
      ))}
    </div>
  );
};

export default FloatingThumbnails;